{
  "title": "TypesScript Handbook Mark",
  "date": "2022-11-04T02:30:00.000Z",
  "body": {
    "raw": "\n# TypesScript Handbook\n> Much of the time, you will know better than TypeScript.\n\n## 常见类型\n### 类型别名和接口的区别 [🔗](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces)\n- 扩展\n```typescript\n// interface\ninterfaces A extends B{\n  property1: string;\n  property2: string;\n}\n\n// type alias\ntype A  = {\n  property1: string;\n}\ntype B = {\n  property2: string;\n}\ntype Union = A & B\n```\n- 重复定义：interface重复定义是往接口内添加属性，type类型别名不能重复定义\n\n## Narrowing\n### Truthiness narrowing [🔗](https://www.typescriptlang.org/docs/handbook/2/narrowing.html#truthiness-narrowing)\n- Double-Boolean negation：TypeScript infers a narrow literal boolean type true，rather than boolean.  \n`!!\"str\"; //type: true value: true`  \n`Boolean(\"str); //type: boolean value: true`\n\n## Function Types\n\n## Object Types\n### 只读属性：\n- TS在判断是否是同一类型时不考虑readonly属性\n- 可通过使用别名改变readonly属性\n```typescript\ninterface Person {\n  name: string;\n  age: number;\n}\n \ninterface ReadonlyPerson {\n  readonly name: string;\n  readonly age: number;\n}\n \nlet writablePerson: Person = {\n  name: \"Person Mike\",\n  age: 42,\n};\n \n// works\nlet readonlyPerson: ReadonlyPerson = writablePerson;\n \nconsole.log(readonlyPerson.age); // prints '42'\nwritablePerson.age++;\n```\n",
    "code": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),w=(r,n)=>{for(var t in n)o(r,t,{get:n[t],enumerable:!0})},l=(r,n,t,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let i of y(n))!g.call(r,i)&&i!==t&&o(r,i,{get:()=>n[i],enumerable:!(a=p(n,i))||a.enumerable});return r};var m=(r,n,t)=>(t=r!=null?h(u(r)):{},l(n||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),f=r=>l(o({},\"__esModule\",{value:!0}),r);var s=b((_,c)=>{c.exports=_jsx_runtime});var j={};w(j,{default:()=>P,frontmatter:()=>k});var e=m(s()),k={title:\"TypesScript Handbook Mark\",date:new Date(16675578e5)};function d(r){let n=Object.assign({h1:\"h1\",blockquote:\"blockquote\",p:\"p\",h2:\"h2\",h3:\"h3\",a:\"a\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",br:\"br\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{id:\"typesscript-handbook\",children:\"TypesScript Handbook\"}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Much of the time, you will know better than TypeScript.\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"\\u5E38\\u89C1\\u7C7B\\u578B\",children:\"\\u5E38\\u89C1\\u7C7B\\u578B\"}),`\n`,(0,e.jsxs)(n.h3,{id:\"\\u7C7B\\u578B\\u522B\\u540D\\u548C\\u63A5\\u53E3\\u7684\\u533A\\u522B\",children:[\"\\u7C7B\\u578B\\u522B\\u540D\\u548C\\u63A5\\u53E3\\u7684\\u533A\\u522B\",(0,e.jsx)(n.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces\",children:\"\\u{1F517}\"})]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"\\u6269\\u5C55\"}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`// interface\ninterfaces A extends B{\n  property1: string;\n  property2: string;\n}\n\n// type alias\ntype A  = {\n  property1: string;\n}\ntype B = {\n  property2: string;\n}\ntype Union = A & B\n`})}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"\\u91CD\\u590D\\u5B9A\\u4E49\\uFF1Ainterface\\u91CD\\u590D\\u5B9A\\u4E49\\u662F\\u5F80\\u63A5\\u53E3\\u5185\\u6DFB\\u52A0\\u5C5E\\u6027\\uFF0Ctype\\u7C7B\\u578B\\u522B\\u540D\\u4E0D\\u80FD\\u91CD\\u590D\\u5B9A\\u4E49\"}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"narrowing\",children:\"Narrowing\"}),`\n`,(0,e.jsxs)(n.h3,{id:\"truthiness-narrowing\",children:[\"Truthiness narrowing\",(0,e.jsx)(n.a,{href:\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#truthiness-narrowing\",children:\"\\u{1F517}\"})]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[\"Double-Boolean negation\\uFF1ATypeScript infers a narrow literal boolean type true\\uFF0Crather than boolean.\",(0,e.jsx)(n.br,{}),`\n`,(0,e.jsx)(n.code,{children:'!!\"str\"; //type: true value: true'}),(0,e.jsx)(n.br,{}),`\n`,(0,e.jsx)(n.code,{children:'Boolean(\"str); //type: boolean value: true'})]}),`\n`]}),`\n`,(0,e.jsx)(n.h2,{id:\"function-types\",children:\"Function Types\"}),`\n`,(0,e.jsx)(n.h2,{id:\"object-types\",children:\"Object Types\"}),`\n`,(0,e.jsx)(n.h3,{id:\"\\u53EA\\u8BFB\\u5C5E\\u6027\",children:\"\\u53EA\\u8BFB\\u5C5E\\u6027\\uFF1A\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"TS\\u5728\\u5224\\u65AD\\u662F\\u5426\\u662F\\u540C\\u4E00\\u7C7B\\u578B\\u65F6\\u4E0D\\u8003\\u8651readonly\\u5C5E\\u6027\"}),`\n`,(0,e.jsx)(n.li,{children:\"\\u53EF\\u901A\\u8FC7\\u4F7F\\u7528\\u522B\\u540D\\u6539\\u53D8readonly\\u5C5E\\u6027\"}),`\n`]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`interface Person {\n  name: string;\n  age: number;\n}\n \ninterface ReadonlyPerson {\n  readonly name: string;\n  readonly age: number;\n}\n \nlet writablePerson: Person = {\n  name: \"Person Mike\",\n  age: 42,\n};\n \n// works\nlet readonlyPerson: ReadonlyPerson = writablePerson;\n \nconsole.log(readonlyPerson.age); // prints '42'\nwritablePerson.age++;\n`})})]})}function x(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(d,r)})):d(r)}var P=x;return f(j);})();\n;return Component;"
  },
  "_id": "TypeScript/index.mdx",
  "_raw": {
    "sourceFilePath": "TypeScript/index.mdx",
    "sourceFileName": "index.mdx",
    "sourceFileDir": "TypeScript",
    "contentType": "mdx",
    "flattenedPath": "TypeScript"
  },
  "type": "Framework",
  "url": "src/framework/TypeScript"
}