{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/plugins/remark-note-block.mjs", "../../../src/plugins/remark-mdx-meta-to-props.mjs"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport remarkNoteBlock from './src/plugins/remark-note-block.mjs'\nimport remarkMdxMetaToProps from './src/plugins/remark-mdx-meta-to-props.mjs'\n\nexport const Framework = defineDocumentType(() => ({\n  name: 'Framework',\n  filePathPattern: `**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n    date: {\n      type: 'date',\n      description: 'The date of the post',\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) => `src/framework/${post._raw.flattenedPath}`,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'src/framework',\n  documentTypes: [Framework],\n  mdx: {\n    remarkPlugins: [\n      remarkMdxMetaToProps,\n      remarkNoteBlock\n    ]\n  }\n})", "import { visit } from 'unist-util-visit'\nimport { h } from 'hastscript'\n\n/** @type {import('unified').Plugin<[], import('mdast').Root>} */\nexport default function remarkNoteBlock() {\n  return (tree) => {\n    visit(tree, (node) => {\n      if (node.type === 'containerDirective') {\n        if (!['tip', 'warning', 'danger'].includes(node.name)) return\n\n        const data = node.data || (node.data = {})\n        const tagName = 'div'\n\n        data.hName = tagName\n        data.hProperties = h(tagName, { class: `note ${node.name}` }).properties\n      }\n    })\n  }\n}\n", "import { Parser } from 'acorn'\nimport jsx from 'acorn-jsx'\nimport { visit } from 'unist-util-visit'\n\nconst parser = Parser.extend(jsx())\n/**\n * Code fence only pass code and language, this plugin can pass custom properties\n */\n/** @type {import('unified').Plugin<[], import('mdast').Root>} */\nexport default function remarkMdxMetaToProps() {\n  return (tree) => {\n    visit(tree, 'code', (node, index, parent) => {\n      console.log('node', node);\n      if (!node.meta) return\n      const code = JSON.stringify(`${node.value}`)\n      const value = `<code className=\"language-${node.lang}\" ${node.meta}>{${code}}</code>`\n      const estree = parser.parse(value, { ecmaVersion: 'latest' })\n      console.log('estree', estree);\n      \n      parent.children[index] = { type: 'mdxFlowExpression', value, data: { estree } }\n    })\n  }\n}\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;;;ACA/C,SAAS,aAAa;AACtB,SAAS,SAAS;AAGH,SAAR,kBAAmC;AACxC,SAAO,CAAC,SAAS;AACf,UAAM,MAAM,CAAC,SAAS;AACpB,UAAI,KAAK,SAAS,sBAAsB;AACtC,YAAI,CAAC,CAAC,OAAO,WAAW,QAAQ,EAAE,SAAS,KAAK,IAAI;AAAG;AAEvD,cAAM,OAAO,KAAK,SAAS,KAAK,OAAO,CAAC;AACxC,cAAM,UAAU;AAEhB,aAAK,QAAQ;AACb,aAAK,cAAc,EAAE,SAAS,EAAE,OAAO,QAAQ,KAAK,OAAO,CAAC,EAAE;AAAA,MAChE;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;AClBA,SAAS,cAAc;AACvB,OAAO,SAAS;AAChB,SAAS,SAAAA,cAAa;AAEtB,IAAM,SAAS,OAAO,OAAO,IAAI,CAAC;AAKnB,SAAR,uBAAwC;AAC7C,SAAO,CAAC,SAAS;AACf,IAAAA,OAAM,MAAM,QAAQ,CAAC,MAAM,OAAO,WAAW;AAC3C,cAAQ,IAAI,QAAQ,IAAI;AACxB,UAAI,CAAC,KAAK;AAAM;AAChB,YAAM,OAAO,KAAK,UAAU,GAAG,KAAK,OAAO;AAC3C,YAAM,QAAQ,6BAA6B,KAAK,SAAS,KAAK,SAAS;AACvE,YAAM,SAAS,OAAO,MAAM,OAAO,EAAE,aAAa,SAAS,CAAC;AAC5D,cAAQ,IAAI,UAAU,MAAM;AAE5B,aAAO,SAAS,SAAS,EAAE,MAAM,qBAAqB,OAAO,MAAM,EAAE,OAAO,EAAE;AAAA,IAChF,CAAC;AAAA,EACH;AACF;;;AFlBO,IAAM,YAAY,mBAAmB,OAAO;AAAA,EACjD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,iBAAiB,KAAK,KAAK;AAAA,IAChD;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,SAAS;AAAA,EACzB,KAAK;AAAA,IACH,eAAe;AAAA,MACb;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": ["visit"]
}
